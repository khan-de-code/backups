- name: Ensure ZSH is Installed
  become: true
  ansible.builtin.apt:
    name: zsh
    state: present
    update_cache: true

- name: Run whoami
  become: false
  action: command whoami
  register: whoami
  changed_when: false

- name: Ensure ZSH is the Default Shell
  become: true
  ansible.builtin.user:
    name: "{{ whoami.stdout }}"
    shell: /usr/bin/zsh

- name: Check if OHMYZSH Executable Exists
  ansible.builtin.stat:
    path: ~/.oh-my-zsh/oh-my-zsh.sh
  register: ohmyzsh_file_status

- name: Download Oh My Zsh installation script
  when: not ohmyzsh_file_status.stat.exists
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
    dest: /tmp/install_ohmyzsh.sh

- name: Run Oh My Zsh installation script
  when: not ohmyzsh_file_status.stat.exists
  ansible.builtin.shell: sh /tmp/install_ohmyzsh.sh --unattended
  register: ohmyzsh_result
  failed_when: "'FAILED' in ohmyzsh_result.stderr"

- name: Update .zshrc With Homebrew Essentials
  block:
    - name: Update EVAL Facts
      ansible.builtin.set_fact:
        eval_marker_begin: "# -------------- Begin Evals ---------------"
        eval_marker_end: "# -------------- End Evals ---------------"
        eval_block: |-
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    - name: Update .zshrc
      ansible.builtin.blockinfile:
        path: ~/.zshrc
        marker: "{mark}"
        marker_begin: "{{ eval_marker_begin }}"
        marker_end: "{{ eval_marker_end }}"
        block: |-
          {{ eval_block }}
        insertbefore: ^plugin(.*)
        append_newline: true
        prepend_newline: true

- name: Check if Homebrew is Installed
  ansible.builtin.shell: "command -v brew"
  register: homebrew_exists
  ignore_errors: true
  changed_when: false

- name: Install Homebrew
  when: homebrew_exists is failed
  ansible.builtin.shell: |-
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

- name: Check if Homebrew is Installed
  ansible.builtin.shell: "command -v brew"
  register: homebrew_exists
  ignore_errors: true
  changed_when: false

- name: Homebrew Check Failed
  when: homebrew_exists is failed
  ansible.builtin.debug:
    msg: "Homebrew must be installed first."
  failed_when: true

- name: Exit Play if Homebrew Not Installed
  when: homebrew_exists is failed
  ansible.builtin.meta: end_play

- name: Update Homebrew
  community.general.homebrew:
    update_homebrew: true